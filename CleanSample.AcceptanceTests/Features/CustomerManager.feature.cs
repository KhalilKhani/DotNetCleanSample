// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CleanSample.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CustomerManagerFeature : object, Xunit.IClassFixture<CustomerManagerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CustomerManager.feature"
#line hidden
        
        public CustomerManagerFeature(CustomerManagerFeature.FixtureData fixtureData, CleanSample_AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Customer Manager", "\tAs a an operator I wish to be able to Create, Update, Delete customers and list " +
                    "all customers", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a Customer and Verify Uniqueness")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Manager")]
        [Xunit.TraitAttribute("Description", "Create a Customer and Verify Uniqueness")]
        [Xunit.TraitAttribute("Category", "create")]
        public void CreateACustomerAndVerifyUniqueness()
        {
            string[] tagsOfScenario = new string[] {
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Customer and Verify Uniqueness", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table1.AddRow(new string[] {
                            "Khalil",
                            "Khani",
                            "1990-01-01",
                            "+989145799298",
                            "Khalil.Khani@example.com",
                            "IR000000000000001"});
#line 6
 testRunner.Given("the customer details:", ((string)(null)), table1, "Given ");
#line hidden
#line 9
 testRunner.When("a request is made to create a new customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("the response of creating the customer should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table2.AddRow(new string[] {
                            "Khalil",
                            "Khani",
                            "1990-01-01",
                            "+989145799298",
                            "Khalil.Khani@example.com",
                            "IR000000000000001"});
#line 11
 testRunner.And("the created customer details should be returned:", ((string)(null)), table2, "And ");
#line hidden
#line 14
 testRunner.When("a request is made to create a new customer with the same details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("the response should be BadRequest due to uniqueness violation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update a Customer and Verify Uniqueness")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Manager")]
        [Xunit.TraitAttribute("Description", "Update a Customer and Verify Uniqueness")]
        [Xunit.TraitAttribute("Category", "update")]
        public void UpdateACustomerAndVerifyUniqueness()
        {
            string[] tagsOfScenario = new string[] {
                    "update"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a Customer and Verify Uniqueness", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table3.AddRow(new string[] {
                            "1",
                            "Sima",
                            "Smith",
                            "1992-05-12",
                            "+989371133325",
                            "sima.smith@example.com",
                            "IR000000000000001"});
                table3.AddRow(new string[] {
                            "2",
                            "Khalil",
                            "Khani",
                            "1990-01-01",
                            "+989145799298",
                            "Khalil.Khani@example.com",
                            "IR000000000000002"});
#line 20
 testRunner.Given("existing customers with the following details:", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table4.AddRow(new string[] {
                            "1",
                            "Reza",
                            "Rezai",
                            "1992-06-20",
                            "+989371133326",
                            "reza.rezai@example.com",
                            "IR000000000000003"});
#line 24
 testRunner.When("a request is made to update customer with Id 1 and the following updated details:" +
                        "", ((string)(null)), table4, "When ");
#line hidden
#line 27
 testRunner.Then("the response of updating the customer should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table5.AddRow(new string[] {
                            "1",
                            "Reza",
                            "Rezai",
                            "1992-06-20",
                            "+989371133326",
                            "reza.rezai@example.com",
                            "IR000000000000003"});
#line 28
 testRunner.And("the updated customer details should be returned:", ((string)(null)), table5, "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table6.AddRow(new string[] {
                            "1",
                            "Khalil",
                            "Khani",
                            "1990-01-01",
                            "+989145799298",
                            "Khalil.Khani@example.com",
                            "IR000000000000002"});
#line 31
 testRunner.When("a request is made to update customer with Id 1 and the following duplicated detai" +
                        "ls:", ((string)(null)), table6, "When ");
#line hidden
#line 34
 testRunner.Then("the response of update should be BadRequest due to uniqueness violation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete a Customer")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Manager")]
        [Xunit.TraitAttribute("Description", "Delete a Customer")]
        [Xunit.TraitAttribute("Category", "delete")]
        public void DeleteACustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "delete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a Customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.Given("an existing customer (to be deleted) with the Id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.When("a request is made to delete customer with Id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.Then("the response of deleting the customer should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.When("a request is made to retrieve deleted customer with Id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("the response of delete should be not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Retrieve a Customer")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Manager")]
        [Xunit.TraitAttribute("Description", "Retrieve a Customer")]
        [Xunit.TraitAttribute("Category", "retrieve")]
        public void RetrieveACustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "retrieve"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve a Customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table7.AddRow(new string[] {
                            "1",
                            "Khalil",
                            "Khani",
                            "1990-01-01",
                            "+989145799298",
                            "Khalil.Khani@example.com",
                            "IR000000000000001"});
#line 48
 testRunner.Given("an existing customer with the following details:", ((string)(null)), table7, "Given ");
#line hidden
#line 51
 testRunner.When("a request is made to retrieve customer with Id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("the response of retrieving the customer should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table8.AddRow(new string[] {
                            "Khalil",
                            "Khani",
                            "1990-01-01",
                            "+989145799298",
                            "Khalil.Khani@example.com",
                            "IR000000000000001"});
#line 53
 testRunner.And("the retrieved customer details should be returned:", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List all Customers")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Manager")]
        [Xunit.TraitAttribute("Description", "List all Customers")]
        [Xunit.TraitAttribute("Category", "retrieveList")]
        public void ListAllCustomers()
        {
            string[] tagsOfScenario = new string[] {
                    "retrieveList"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all Customers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table9.AddRow(new string[] {
                            "1",
                            "Tom",
                            "Hanks",
                            "1962-03-21",
                            "+989371133670",
                            "tom.hanks@example.com",
                            "IR000000000000001"});
                table9.AddRow(new string[] {
                            "2",
                            "Gary",
                            "Kasbarof",
                            "1970-01-01",
                            "+989145799325",
                            "gary.kasbarof@example.com",
                            "IR000000000000002"});
#line 60
 testRunner.Given("the following customers exist:", ((string)(null)), table9, "Given ");
#line hidden
#line 64
 testRunner.When("a request is made to list all customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.Then("the response of getting all customers should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table10.AddRow(new string[] {
                            "1",
                            "Tom",
                            "Hanks",
                            "1962-03-21",
                            "+989371133670",
                            "tom.hanks@example.com",
                            "IR000000000000001"});
                table10.AddRow(new string[] {
                            "2",
                            "Gary",
                            "Kasbarof",
                            "1970-01-01",
                            "+989145799325",
                            "gary.kasbarof@example.com",
                            "IR000000000000002"});
#line 66
 testRunner.And("the response should contain the following customer details:", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CustomerManagerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CustomerManagerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
